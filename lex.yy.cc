#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[373] =
    {   0,
       14,   14,   20,   18,    2,    1,   18,   18,    9,   18,
        8,    3,   18,   18,   18,   18,   10,   16,   18,   18,
       18,   18,    0,   15,   18,   18,   18,   18,    7,    5,
        4,   14,   14,   14,   18,    0,   18,   18,   13,   18,
       18,   16,   16,   16,   16,   15,   18,   14,   14,   14,
       14,   18,    0,   18,   18,   18,   18,    0,   18,   17,
        6,   14,   14,   14,    0,   14,   13,   18,   14,   14,
       14,   13,   18,   18,   16,   14,   14,   14,   18,   15,
       18,    0,   18,   17,   14,   14,   14,   14,   14,    0,
       14,   18,    0,   18,   13,   18,   13,   18,   14,   14,

       14,   13,   18,   17,   14,   14,   14,   14,   17,   17,
       17,   17,   14,   14,   14,   18,   18,    0,   18,   13,
       17,   14,   14,   13,   14,    0,   13,   14,   11,   18,
       16,   16,   16,   16,   16,   14,   14,   14,   14,   16,
       18,   15,   17,   14,   14,   14,   14,   14,   17,   15,
       17,   17,   17,   14,   14,   14,   14,   14,   18,   18,
        0,   13,   18,   17,   14,   14,   13,   14,   13,    0,
       14,   17,   17,   17,   14,   14,    0,   14,   14,   14,
       14,   17,   14,   14,   14,   18,   13,   17,   14,   14,
       14,   13,   14,   17,   17,   17,   13,   17,   13,   14,

       14,   13,   14,   18,   16,   16,   14,   14,   14,   14,
       16,   16,   16,   16,   14,   14,   14,   17,   15,   17,
       17,   14,   14,   14,    0,   14,   14,   14,   14,   14,
       17,   14,   14,   14,   14,   18,   13,   17,   14,   14,
       14,   13,   14,   17,   17,   13,   17,   17,   13,   14,
       14,   13,   14,   17,   14,   14,   14,   17,   14,   14,
       17,   17,   13,   17,   14,   14,    0,   13,   14,   14,
       14,   13,   14,   17,   14,   14,   13,   14,   18,   16,
       16,   16,   14,   14,   16,   14,   14,   14,   14,   16,
       14,   14,   14,   17,   14,   14,   14,   14,   14,   17,

       14,   14,   17,   17,   13,   17,   14,   14,   13,    0,
       14,   14,   14,   13,   14,   17,   14,   14,   13,   14,
       14,   14,   14,   14,   17,   13,   14,   14,   14,   17,
       13,   14,   14,    0,   16,   14,   14,   14,   16,   14,
       14,   14,   14,   14,   14,   14,   17,   13,   14,   14,
       14,   13,   17,   14,   14,   14,   14,   14,   13,   14,
       12,   14,   14,   14,   14,   14,   14,   14,   13,   14,
       12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,   14,    1,    1,   15,    1,

       16,    1,    1,    1,   17,    1,    1,    1,    1,    1,
       18,    1,    1,   19,   20,   21,   22,    1,    1,   23,
        1,    1,   24,   25,   26,   27,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[28] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    1,    1,    1,
        5,    5,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    1,    1
    } ;

static const flex_int16_t yy_base[488] =
    {   0,
        0,    0,  321,   22, 3702, 3702,   32,   34, 3702,   40,
     3702,   22,   57,   81,   42,   54, 3702,  101,   43,  312,
      125,  147,  314,   42,  292,  171,  193,  213, 3702, 3702,
      308,   64,  301,   65,  238,  297,  285,  262,   66,   67,
       78,  282,  282,    0,  306, 3702,  328,  351,  373,   67,
      395,  417,  296,  439,  463,  483,  280,  277,  508,  529,
     3702,   90,   91,  289,    0,  550, 3702,  575,  600,  624,
      648,   92,  101,  109,  668,  689,  709,  728,  750,    0,
      277,   28,  775,  798,  276,  105,    0,  821,  286,   74,
      843,  274,  288,    0,  272,  868,  283,  890,  913,  935,

      957,  267,    0,  977,  998,  266, 1018, 1039, 1060,  262,
     1085,    0,    0,  261, 1106, 1131,  260,  141, 1156,    0,
     1181,  259,    0,  110, 1206,  268,  268, 1230,  111,  132,
     1251,  256,  253, 1276, 1297,  254,    0, 1318, 1338,   97,
        0,  251, 1360, 1383,    0,  251, 1406, 1429, 1452,    0,
     1475, 1500,  248,  258,    0,    0,  246, 1523, 1546,  243,
      135,    0, 1571, 1594,  241,    0,  238, 1617, 1639,  132,
     1661, 1682, 1703,  237,    0, 1723,  144, 1744, 1765, 1786,
      236,    0,  235,    0,  234, 1811,  231, 1836, 1861,  232,
     1886,    0, 1911, 1936, 1961, 1986,    0,  231,  241,    0,

      229,    0, 2011,  158, 2032, 2053, 2074,  224, 2094, 2115,
     2136, 2157, 2182,  223,    0,  222, 2203, 2226,  219, 2249,
      217,    0, 2272, 2292,  161, 2315, 2338,  213, 2361,  212,
     2384,  211,  210,    0,  209, 2407,  153, 2430, 2453,  208,
     2476,    0, 2499, 2522, 2545,  206, 2570,  205, 2593,    0,
      204,    0, 2615,  203, 2636, 2657,  199, 2682,    0,  198,
     2707, 2732,  197,  193,    0, 2757,  184,    0, 2782,    0,
      192,  191,    0, 2807,    0,  188,  187,    0,  188, 2828,
      184,    0,    0, 2848,  187, 2869,    0,  179,    0,  178,
        0,  171,    0,  169,    0, 2892,    0,    0,  166, 2917,

        0,  161, 2940,  160,    0,    0,    0, 2963,    0,  205,
     2986,    0,  157,    0,    0,  156,    0,  145,    0,    0,
        0,    0,  144,    0,  125,    0, 3011,    0,  118, 3036,
        0,    0,    0,    0,    0, 3057,    0,  114, 3082,    0,
        0,    0,    0,    0,  106,    0,    0,    0, 3105,    0,
      100,    0, 3130,    0,    0,    0,    0,   97,    0,    0,
        0,    0,    0,   96,    0,    0,    0,   86,    0,    0,
        0, 3702,   80, 3156, 3161, 3166, 3171, 3176, 3181, 3186,
     3191,   61,   50, 3196, 3201, 3206, 3211, 3216, 3221, 3226,
     3231, 3236, 3241, 3246, 3251, 3256, 3261, 3266, 3271, 3276,

     3281, 3286, 3291, 3296, 3301, 3306, 3311, 3316, 3321, 3326,
     3331, 3336, 3341, 3346, 3351, 3356, 3361, 3366, 3371, 3376,
     3381, 3386, 3391, 3396, 3401, 3406, 3411, 3416, 3421, 3426,
     3431, 3436, 3441, 3446, 3451, 3456, 3461, 3466, 3471, 3476,
     3481, 3486, 3491, 3496, 3501, 3506, 3511, 3516, 3521,   40,
     3526, 3531, 3536, 3541, 3546, 3551, 3556, 3561, 3566, 3571,
     3576, 3581, 3586, 3591, 3596, 3601, 3606, 3611, 3616, 3621,
     3626, 3631, 3636, 3641, 3646, 3651, 3656, 3661, 3666, 3671,
     3676, 3681, 3686,   30, 3691, 3696,   29
    } ;

static const flex_int16_t yy_def[488] =
    {   0,
      372,    1,  372,  373,  372,  372,  374,  373,  372,  373,
      372,  372,  375,  376,  373,  373,  372,  377,  373,    8,
      375,  374,  378,    8,   22,  379,  380,  381,  372,  372,
      372,  382,  383,  382,  376,  384,   35,  385,    8,    8,
        8,  377,   42,  386,  387,  372,  388,  389,  390,  382,
      389,  391,  392,  391,  393,  381,   56,  394,  395,  396,
      372,  382,  382,  383,  397,  398,  372,  399,  400,  401,
      400,  382,    8,    8,  402,  403,  403,  404,  388,   56,
       79,  405,  406,  407,   51,  382,   51,  390,  383,  408,
      409,   54,  392,   54,   54,  393,  392,  410,  411,  412,

      411,  101,   56,  413,  398,  105,  414,  415,  396,  109,
      416,  109,  105,  105,  415,  399,  116,  417,  418,   56,
      419,   71,   71,  382,  401,  420,  383,  421,    8,    8,
      402,  131,  422,  423,  424,   77,   77,  425,  404,  426,
       79,  427,  428,  409,  105,  144,  429,  430,  431,  109,
      431,  432,  151,  383,  144,  105,  144,  430,  410,  159,
      433,  159,  434,  435,  101,  101,  101,  436,  436,  437,
      438,  439,  439,  173,  105,  440,  441,  442,  443,  443,
      180,  109,  180,  180,  180,  444,  427,  445,  421,  189,
      446,  105,  447,  448,  448,  449,  109,  195,  383,  189,

      189,  105,  447,  450,  451,  452,  425,  207,  453,  454,
      455,  455,  456,  212,  207,  207,  454,  457,  173,  457,
      220,  144,  458,  440,  459,  460,  461,  180,  461,  229,
      462,  229,  180,  229,  229,  463,  464,  465,  438,  239,
      466,  239,  467,  468,  468,  245,  469,  245,  470,  239,
      239,  239,  467,  173,  471,  471,  256,  472,  256,  180,
      473,  473,  173,  262,  189,  474,  475,  224,  476,  203,
      203,  180,  203,  477,  203,  203,  180,  203,  450,  452,
      280,  280,  207,  453,  478,  479,  217,  217,  217,  212,
      217,  217,  217,  220,  224,  460,  296,  256,  296,  480,

      296,  229,  465,  303,  303,  303,  239,  466,  308,  481,
      482,  253,  253,  253,  253,  245,  253,  253,  253,  253,
      256,  256,  256,  256,  262,  224,  476,  327,  327,  483,
      256,  327,  203,  484,  280,  479,  336,  336,  485,  336,
      217,  296,  296,  256,  296,  296,  303,  308,  482,  349,
      349,  349,  486,  349,  253,  327,  327,  327,  256,  327,
      487,  336,  336,  336,  336,  349,  349,  349,  349,  349,
      487,    0,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372
    } ;

static const flex_int16_t yy_nxt[3730] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,    4,   15,    4,    4,    4,   16,
        4,    4,    4,    4,   17,    4,   18,   20,   30,  371,
      361,   23,  142,   31,   21,   23,   24,   25,   23,   20,
       19,   27,   23,   23,   26,   20,   21,   20,   20,   19,
       64,   29,   21,  143,   21,   21,   23,   28,   33,   20,
       33,   62,   34,   33,   40,   19,   21,   33,   33,   63,
       63,   41,   63,   19,   19,   33,   21,   21,  154,   21,
       19,   33,   36,   73,   36,   19,   37,   36,   66,   19,
       19,   36,   36,   38,   39,   63,   63,   63,   33,   74,

       33,   19,   21,   21,   21,   36,   43,   44,   19,  366,
       63,   44,   44,   45,   66,   63,   19,   21,   19,  362,
      356,  129,   21,  366,   19,   44,   33,  130,   33,  342,
       34,   33,   19,   33,   19,   33,   33,  362,   93,   19,
      249,  356,   36,  237,   36,   33,  204,   33,  261,   33,
       23,   24,   25,   23,  187,   19,   93,   23,   23,   26,
      238,  237,   33,   20,   49,  295,  188,  321,  355,  255,
       21,   23,   33,  279,   49,   50,   51,   49,  238,  244,
      355,   49,   49,  347,  227,   70,  296,   70,   33,  342,
       33,  334,  218,   20,  341,   49,   53,  326,   54,   53,

       21,  211,  341,   53,   53,   55,   33,  335,  100,  327,
      179,  333,  336,  348,  179,  333,  261,   53,   57,   58,
      172,  179,  321,   58,   58,   59,  172,  307,  244,  244,
      349,  307,  227,  179,  227,  227,  179,   58,   60,   36,
      218,   36,  172,   37,   36,  283,  211,  283,   36,   36,
       38,   39,  265,   65,  194,  265,  104,  179,  179,  179,
      172,  165,   36,   70,  165,   70,  236,   71,   70,  222,
       65,  149,   70,   70,  222,   72,  104,  136,  206,  205,
       65,  199,  122,  186,  175,  182,   70,   43,   44,  175,
      165,   97,   44,   44,   45,   92,   97,   92,   65,   85,

      141,   65,  104,  103,   97,   75,   44,   33,   68,   33,
       67,   77,   78,   65,   61,   47,   78,   78,   46,   19,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       78,   23,   80,   81,   82,  372,  372,  372,   82,   82,
       83,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   82,   84,   23,   86,   87,   23,  372,  372,
      372,   23,   23,   26,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,   23,   23,   89,  372,   23,
      372,  372,  372,   23,   23,   90,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   23,   23,   86,

       87,   23,  372,  372,  372,   23,   23,   26,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,   91,   23,
       93,  372,   94,   93,  372,   95,  372,   93,   93,   96,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,   93,   93,  372,   94,   93,  372,   95,  372,   93,
       93,   96,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   98,   93,   33,  372,  100,  372,  101,  100,
      372,  102,  372,  100,  100,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  100,   57,   58,
      372,  372,  372,   58,   58,   59,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,   58,   60,   33,
      372,   33,  372,  106,  107,  372,  372,  372,  107,  107,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  107,  108,  110,   58,  372,  372,  372,   58,
       58,  111,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,   58,  112,  114,   58,  372,  372,  372,
       58,   58,   59,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,   58,  115,   36,  372,   36,  372,
      117,  118,  372,  372,  372,  118,  118,  119,  120,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  118,

      121,   36,  372,   36,  372,  123,   36,  372,  372,  372,
       36,   36,   38,  124,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,   36,   36,  372,   36,  372,  372,
       36,  372,  372,  372,   36,   36,  126,  127,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,   36,   36,
      372,   36,  372,  123,   36,  372,  372,  372,   36,   36,
       38,  124,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  128,   36,  132,  133,  372,  372,  372,  133,  133,
      134,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  133,  135,  137,   44,  372,  372,  372,   44,

       44,   45,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,   44,  137,   44,  372,  372,  372,   44,
       44,   45,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  138,   44,   44,  372,  372,  372,   44,   44,
      140,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   44,   23,   80,   81,   82,  372,  372,  372,
       82,   82,   83,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,   82,   84,   33,  372,   49,  145,
      146,  147,  372,  372,  372,  147,  147,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  147,

      148,   23,  150,  151,   82,  372,  372,  372,   82,   82,
      152,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   82,  153,   23,   89,  372,   23,  372,  372,
      372,   23,   23,   90,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,   23,   23,  156,  157,   82,
      372,  372,  372,   82,   82,   83,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   82,  158,   33,
      372,  100,  372,  101,  100,  372,  102,  372,  100,  100,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  100,   93,  372,  160,  161,  372,  162,  372,

      161,  161,  163,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  161,  164,   93,  372,  166,   93,
      372,  167,  372,   93,   93,   96,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   93,   93,  372,
      372,   93,  372,  169,  372,   93,   93,  170,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,   93,
       93,  372,  166,   93,  372,  167,  372,   93,   93,   96,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      171,   93,  173,   58,  372,  372,  372,   58,   58,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,   58,  174,  114,   58,  372,  372,  372,   58,   58,
       59,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   58,  115,   58,  372,  372,  372,   58,   58,
      177,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   58,  178,  180,   58,  372,  372,  372,   58,
       58,  111,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,   58,  181,  110,   58,  372,  372,  372,
       58,   58,  111,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,   58,  112,   33,  372,   33,  372,
      184,  107,  372,  372,  372,  107,  107,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  107,
      185,  180,   58,  372,  372,  372,   58,   58,  111,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       58,  181,   36,  372,   36,  372,  117,  118,  372,  372,
      372,  118,  118,  119,  120,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  121,   70,  372,   70,
      372,  190,  191,  372,  372,  372,  191,  191,  372,  192,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      191,  193,   36,  372,   36,  372,  195,  118,  372,  372,
      372,  118,  118,  196,  197,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  118,  198,   36,  372,   36,
      372,  372,   36,  372,  372,  372,   36,   36,  126,  127,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       36,   36,  372,   36,  372,  201,  118,  372,  372,  372,
      118,  118,  119,  202,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  118,  203,  132,  133,  372,  372,
      372,  133,  133,  134,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  133,  135,   33,  372,   33,
      372,  208,  209,  372,  372,  372,  209,  209,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      209,  210,  212,  133,  372,  372,  372,  133,  133,  213,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  133,  214,  216,  133,  372,  372,  372,  133,  133,
      134,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  133,  217,   44,  372,  372,  372,   44,   44,
      140,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   44,   23,  219,  220,   82,  372,  372,  372,
       82,   82,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,   82,  221,   23,  156,  157,   82,
      372,  372,  372,   82,   82,   83,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,   82,  158,   23,
      224,  372,   82,  372,  372,  372,   82,   82,  225,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       82,  226,   23,  228,  229,   82,  372,  372,  372,   82,
       82,  152,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,   82,  230,   23,  150,  151,   82,  372,
      372,  372,   82,   82,  152,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,   82,  153,   23,  150,
      151,   82,  372,  372,  372,   82,   82,  152,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  231,   82,

      153,   33,  372,   49,  233,  234,  147,  372,  372,  372,
      147,  147,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  147,  235,   23,  228,  229,   82,
      372,  372,  372,   82,   82,  152,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   82,  230,   93,
      372,  160,  161,  372,  162,  372,  161,  161,  163,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      161,  164,   33,  372,  100,  372,  240,  241,  372,  242,
      372,  241,  241,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  241,  243,   93,  372,  245,

      161,  372,  246,  372,  161,  161,  247,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  161,  248,
       93,  372,  372,   93,  372,  169,  372,   93,   93,  170,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,   93,   93,  372,  372,   93,  372,  169,  372,   93,
       93,  170,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,   93,   93,  372,  251,  161,  372,  252,
      372,  161,  161,  163,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  161,  253,  173,   58,  372,
      372,  372,   58,   58,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,   58,  174,  173,   58,
      372,  372,  372,   58,   58,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  254,   58,  174,   58,
      372,  372,  372,   58,   58,  177,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   58,  178,  257,
       58,  372,  372,  372,   58,   58,  258,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,   58,  259,
      180,   58,  372,  372,  372,   58,   58,  111,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,   58,
      181,  180,   58,  372,  372,  372,   58,   58,  111,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  260,
       58,  181,   36,  372,   36,  372,  117,  118,  372,  372,
      372,  118,  118,  119,  120,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  121,   36,  372,   36,
      372,  262,  118,  372,  372,  372,  118,  118,  372,  263,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      118,  264,   36,  372,   36,  372,  201,  118,  372,  372,
      372,  118,  118,  119,  202,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  203,   36,  372,   36,
      372,  372,  118,  372,  372,  372,  118,  118,  267,  268,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      118,  269,   36,  372,   36,  372,  271,  118,  372,  372,
      372,  118,  118,  196,  272,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  273,   36,  372,   36,
      372,  195,  118,  372,  372,  372,  118,  118,  196,  197,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      118,  198,   36,  372,   36,  372,  195,  118,  372,  372,
      372,  118,  118,  196,  197,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  274,  118,  198,   70,  372,   70,
      372,  276,  191,  372,  372,  372,  191,  191,  372,  277,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      191,  278,   36,  372,   36,  372,  271,  118,  372,  372,
      372,  118,  118,  196,  272,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  273,  132,  133,  372,
      372,  372,  133,  133,  134,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  133,  135,  281,  133,
      372,  372,  372,  133,  133,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  133,  282,  216,
      133,  372,  372,  372,  133,  133,  134,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  133,  217,

      133,  372,  372,  372,  133,  133,  285,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  133,  286,
      288,  133,  372,  372,  372,  133,  133,  213,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  133,
      289,  212,  133,  372,  372,  372,  133,  133,  213,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      133,  214,  212,  133,  372,  372,  372,  133,  133,  213,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      290,  133,  214,   33,  372,   33,  372,  292,  209,  372,
      372,  372,  209,  209,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  209,  293,  288,  133,
      372,  372,  372,  133,  133,  213,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  133,  289,   23,
      219,  220,   82,  372,  372,  372,   82,   82,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       82,  221,   23,  219,  220,   82,  372,  372,  372,   82,
       82,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  294,   82,  221,   23,  224,  372,   82,  372,
      372,  372,   82,   82,  225,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,   82,  226,   58,  372,

      372,  372,   58,   58,  177,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,   58,  178,   23,  298,
      299,   82,  372,  372,  372,   82,   82,  300,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,   82,
      301,   23,  228,  229,   82,  372,  372,  372,   82,   82,
      152,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,   82,  230,   23,  228,  229,   82,  372,  372,
      372,   82,   82,  152,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  302,   82,  230,   23,  150,  151,
       82,  372,  372,  372,   82,   82,  152,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,   82,  153,
       93,  372,  160,  161,  372,  162,  372,  161,  161,  163,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  161,  164,   93,  372,  304,  161,  372,  305,  372,
      161,  161,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  161,  306,   93,  372,  251,  161,
      372,  252,  372,  161,  161,  163,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  161,  253,   93,
      372,  372,  161,  372,  309,  372,  161,  161,  310,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      161,  311,   93,  372,  313,  161,  372,  314,  372,  161,
      161,  247,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  161,  315,   93,  372,  245,  161,  372,
      246,  372,  161,  161,  247,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  161,  248,   93,  372,
      245,  161,  372,  246,  372,  161,  161,  247,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  316,  161,
      248,   33,  372,  100,  372,  318,  241,  372,  319,  372,
      241,  241,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  241,  320,   93,  372,  372,   93,

      372,  169,  372,   93,   93,  170,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,   93,   93,  372,
      313,  161,  372,  314,  372,  161,  161,  247,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  161,
      315,  257,   58,  372,  372,  372,   58,   58,  258,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
       58,  259,  257,   58,  372,  372,  372,   58,   58,  258,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,   58,  259,   33,  372,   33,  372,  323,  107,  372,
      372,  372,  107,  107,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  107,  324,   36,  372,
       36,  372,  262,  118,  372,  372,  372,  118,  118,  372,
      263,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  118,  264,   36,  372,   36,  372,  262,  118,  372,
      372,  372,  118,  118,  372,  263,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  325,  118,  264,   36,  372,
       36,  372,  372,  118,  372,  372,  372,  118,  118,  267,
      268,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  118,  269,   36,  372,   36,  372,  329,  118,  372,
      372,  372,  118,  118,  330,  331,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  118,  332,   36,  372,
       36,  372,  195,  118,  372,  372,  372,  118,  118,  196,
      197,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  118,  198,  281,  133,  372,  372,  372,  133,  133,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  133,  282,  133,  372,  372,  372,  133,  133,
      285,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  133,  286,  338,  133,  372,  372,  372,  133,
      133,  339,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  133,  340,   23,  298,  299,   82,  372,

      372,  372,   82,   82,  300,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,   82,  301,   33,  372,
       49,  344,  345,  147,  372,  372,  372,  147,  147,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  147,  346,   93,  372,  304,  161,  372,  305,  372,
      161,  161,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  161,  306,   93,  372,  372,  161,
      372,  309,  372,  161,  161,  310,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  161,  311,   93,
      372,  351,  161,  372,  352,  372,  161,  161,  353,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      161,  354,   36,  372,   36,  372,  329,  118,  372,  372,
      372,  118,  118,  330,  331,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  118,  332,   70,  372,   70,
      372,  358,  191,  372,  372,  372,  191,  191,  372,  359,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      191,  360,  338,  133,  372,  372,  372,  133,  133,  339,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  133,  340,   33,  372,   33,  372,  364,  209,  372,
      372,  372,  209,  209,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  209,  365,   93,  372,
      351,  161,  372,  352,  372,  161,  161,  353,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  161,
      354,   33,  372,  100,  372,  368,  241,  372,  369,  372,
      241,  241,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  241,  370,   22,  372,  372,   22,
       22,   32,   32,  372,   32,   32,   35,   35,  372,   35,
       35,   42,  372,  372,  372,   42,   23,  372,  372,   23,
       23,   48,   48,  372,   48,   48,   52,  372,  372,   52,
       52,   56,  372,  372,  372,   56,   36,   36,  372,   36,

       36,   69,   69,  372,   69,   69,   44,  372,  372,  372,
       44,   76,   76,  372,   76,   76,   79,  372,  372,   79,
       79,   85,  372,  372,   85,   85,   88,  372,  372,   88,
       88,   92,  372,  372,   92,   92,   93,  372,  372,   93,
       93,   99,   99,  372,   99,   99,   58,  372,  372,  372,
       58,  105,  105,  372,  105,  105,  109,  372,  372,  372,
      109,   33,   33,  372,   33,   33,  113,  372,  372,  372,
      113,  116,  116,  372,  116,  116,  122,  122,  372,  122,
      122,  125,  125,  372,  125,  125,  131,  372,  372,  372,
      131,  136,  372,  372,  372,  136,  139,  372,  372,  372,

      139,   82,  372,  372,   82,   82,  144,  144,  372,  144,
      144,  149,  372,  372,  149,  149,   49,   49,  372,   49,
       49,  155,  372,  372,  155,  155,  159,  372,  372,  159,
      159,  165,  372,  372,  165,  165,  168,  372,  372,  168,
      168,  172,  372,  372,  372,  172,  176,  372,  372,  372,
      176,  179,  372,  372,  372,  179,  183,  183,  372,  183,
      183,  118,  118,  372,  118,  118,  189,  189,  372,  189,
      189,  194,  194,  372,  194,  194,   70,   70,  372,   70,
       70,  200,  200,  372,  200,  200,  133,  372,  372,  372,
      133,  207,  207,  372,  207,  207,  211,  372,  372,  372,

      211,  215,  372,  372,  372,  215,   78,   78,  372,   78,
       78,   58,  372,  372,  372,   58,  218,  372,  372,  218,
      218,  223,  372,  372,  223,  223,  227,  372,  372,  227,
      227,  149,  372,  372,  149,  149,  232,  232,  372,  232,
      232,  161,  372,  372,  161,  161,  239,  239,  372,  239,
      239,  244,  372,  372,  244,  244,  168,  372,  372,  168,
      168,  100,  100,  372,  100,  100,  250,  372,  372,  250,
      250,  172,  372,  372,  372,  172,  176,  372,  372,  372,
      176,  107,  107,  372,  107,  107,  256,  372,  372,  372,
      256,  179,  372,  372,  372,  179,  116,  116,  372,  116,

      116,  261,  261,  372,  261,  261,  266,  266,  372,  266,
      266,  270,  270,  372,  270,  270,  194,  194,  372,  194,
      194,  275,  275,  372,  275,  275,  131,  372,  372,  372,
      131,  280,  372,  372,  372,  280,  284,  372,  372,  372,
      284,  287,  372,  372,  372,  287,  211,  372,  372,  372,
      211,  291,  291,  372,  291,  291,  218,  372,  372,  218,
      218,  223,  372,  372,  223,  223,  147,  147,  372,  147,
      147,  297,  372,  372,  297,  297,  227,  372,  372,  227,
      227,  149,  372,  372,  149,  149,  159,  372,  372,  159,
      159,  161,  372,  372,  161,  161,  303,  372,  372,  303,

      303,  308,  372,  372,  308,  308,  312,  372,  372,  312,
      312,  244,  372,  372,  244,  244,  317,  317,  372,  317,
      317,  168,  372,  372,  168,  168,  256,  372,  372,  372,
      256,  322,  322,  372,  322,  322,  261,  261,  372,  261,
      261,  266,  266,  372,  266,  266,  191,  191,  372,  191,
      191,  328,  328,  372,  328,  328,  194,  194,  372,  194,
      194,  209,  209,  372,  209,  209,  337,  372,  372,  372,
      337,  343,  343,  372,  343,  343,  241,  241,  372,  241,
      241,  350,  372,  372,  350,  350,  357,  357,  372,  357,
      357,  363,  363,  372,  363,  363,  367,  367,  372,  367,

      367,    3,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372
    } ;

static const flex_int16_t yy_chk[3730] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,   12,  487,
      484,   82,   82,   12,    4,    7,    7,    7,    7,    8,
      450,    8,    7,    7,    7,   10,    8,   15,   19,   24,
      383,   10,   10,   82,   15,   19,    7,    8,   13,   16,
       13,  382,   13,   13,   15,   24,   16,   13,   13,   32,
       34,   16,   50,   39,   40,   90,   32,   34,   90,   50,
      373,   13,   14,   40,   14,   41,   14,   14,   34,   39,
       40,   14,   14,   14,   14,   62,   63,   72,  140,   41,

      140,   41,   62,   63,   72,   14,   18,   18,   73,  368,
       86,   18,   18,   18,   63,  124,   74,   86,  129,  364,
      358,   73,  124,  351,   73,   18,   21,   74,   21,  345,
       21,   21,   74,  170,  129,   21,   21,  338,  161,  130,
      170,  329,  118,  161,  118,  177,  130,  177,  325,   21,
       22,   22,   22,   22,  118,  130,  237,   22,   22,   22,
      161,  237,  225,  204,  225,  225,  118,  323,  318,  177,
      204,   22,   26,  204,   26,   26,   26,   26,  237,  316,
      313,   26,   26,  304,  302,  267,  225,  267,  285,  299,
      285,  279,  294,  279,  292,   26,   27,  267,   27,   27,

      279,  290,  288,   27,   27,   27,  310,  281,  310,  267,
      277,  276,  285,  310,  272,  271,  264,   27,   28,   28,
      263,  260,  257,   28,   28,   28,  254,  251,  248,  246,
      310,  240,  235,  233,  232,  230,  228,   28,   28,   35,
      221,   35,  219,   35,   35,  216,  214,  208,   35,   35,
       35,   35,  201,  199,  198,  190,  187,  185,  183,  181,
      174,  167,   35,   38,  165,   38,  160,   38,   38,  157,
      154,  153,   38,   38,  146,   38,  142,  136,  133,  132,
      127,  126,  122,  117,  114,  110,   38,   42,   42,  106,
      102,   97,   42,   42,   42,   95,   93,   92,   89,   85,

       81,   64,   58,   57,   53,   43,   42,   45,   37,   45,
       36,   45,   45,   33,   31,   25,   45,   45,   23,   20,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,   47,   47,   47,   47,    0,    0,    0,   47,   47,
       47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   47,   47,   48,   48,   48,   48,    0,    0,
        0,   48,   48,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   48,   49,   49,    0,   49,
        0,    0,    0,   49,   49,   49,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,   51,   51,

       51,   51,    0,    0,    0,   51,   51,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   51,   51,
       52,    0,   52,   52,    0,   52,    0,   52,   52,   52,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   52,   54,    0,   54,   54,    0,   54,    0,   54,
       54,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   54,   54,   55,    0,   55,    0,   55,   55,
        0,   55,    0,   55,   55,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   55,   56,   56,
        0,    0,    0,   56,   56,   56,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   56,   56,   59,
        0,   59,    0,   59,   59,    0,    0,    0,   59,   59,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,   59,   60,   60,    0,    0,    0,   60,
       60,   60,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   60,   60,   66,   66,    0,    0,    0,
       66,   66,   66,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   66,   66,   68,    0,   68,    0,
       68,   68,    0,    0,    0,   68,   68,   68,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   68,

       68,   69,    0,   69,    0,   69,   69,    0,    0,    0,
       69,   69,   69,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   69,   70,    0,   70,    0,    0,
       70,    0,    0,    0,   70,   70,   70,   70,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   70,   71,
        0,   71,    0,   71,   71,    0,    0,    0,   71,   71,
       71,   71,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,   71,   75,   75,    0,    0,    0,   75,   75,
       75,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   75,   75,   76,   76,    0,    0,    0,   76,

       76,   76,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   76,   77,   77,    0,    0,    0,   77,
       77,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   77,   78,    0,    0,    0,   78,   78,
       78,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   78,   79,   79,   79,   79,    0,    0,    0,
       79,   79,   79,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,   79,   83,    0,   83,   83,
       83,   83,    0,    0,    0,   83,   83,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   83,

       83,   84,   84,   84,   84,    0,    0,    0,   84,   84,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,   84,   88,   88,    0,   88,    0,    0,
        0,   88,   88,   88,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,   91,   91,   91,   91,
        0,    0,    0,   91,   91,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,   91,   96,
        0,   96,    0,   96,   96,    0,   96,    0,   96,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   96,   98,    0,   98,   98,    0,   98,    0,

       98,   98,   98,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,   98,   99,    0,   99,   99,
        0,   99,    0,   99,   99,   99,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   99,  100,    0,
        0,  100,    0,  100,    0,  100,  100,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
      101,    0,  101,  101,    0,  101,    0,  101,  101,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,  101,  104,  104,    0,    0,    0,  104,  104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  104,  104,  105,  105,    0,    0,    0,  105,  105,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  105,  105,  107,    0,    0,    0,  107,  107,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,  107,  108,  108,    0,    0,    0,  108,
      108,  108,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  108,  108,  109,  109,    0,    0,    0,
      109,  109,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  109,  109,  111,    0,  111,    0,
      111,  111,    0,    0,    0,  111,  111,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  111,
      111,  115,  115,    0,    0,    0,  115,  115,  115,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  115,  116,    0,  116,    0,  116,  116,    0,    0,
        0,  116,  116,  116,  116,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  116,  116,  119,    0,  119,
        0,  119,  119,    0,    0,    0,  119,  119,    0,  119,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,  119,  121,    0,  121,    0,  121,  121,    0,    0,
        0,  121,  121,  121,  121,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  121,  121,  125,    0,  125,
        0,    0,  125,    0,    0,    0,  125,  125,  125,  125,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      125,  128,    0,  128,    0,  128,  128,    0,    0,    0,
      128,  128,  128,  128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  128,  128,  131,  131,    0,    0,
        0,  131,  131,  131,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  131,  131,  134,    0,  134,
        0,  134,  134,    0,    0,    0,  134,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      134,  134,  135,  135,    0,    0,    0,  135,  135,  135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  135,  135,  138,  138,    0,    0,    0,  138,  138,
      138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  138,  138,  139,    0,    0,    0,  139,  139,
      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  139,  143,  143,  143,  143,    0,    0,    0,
      143,  143,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  143,  143,  144,  144,  144,  144,
        0,    0,    0,  144,  144,  144,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  144,  144,  147,
      147,    0,  147,    0,    0,    0,  147,  147,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      147,  147,  148,  148,  148,  148,    0,    0,    0,  148,
      148,  148,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  148,  148,  149,  149,  149,  149,    0,
        0,    0,  149,  149,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  149,  149,  151,  151,
      151,  151,    0,    0,    0,  151,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,  151,

      151,  152,    0,  152,  152,  152,  152,    0,    0,    0,
      152,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  152,  152,  158,  158,  158,  158,
        0,    0,    0,  158,  158,  158,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  158,  158,  159,
        0,  159,  159,    0,  159,    0,  159,  159,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      159,  159,  163,    0,  163,    0,  163,  163,    0,  163,
        0,  163,  163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  163,  163,  164,    0,  164,

      164,    0,  164,    0,  164,  164,  164,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  164,  164,
      168,    0,    0,  168,    0,  168,    0,  168,  168,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  168,  169,    0,    0,  169,    0,  169,    0,  169,
      169,  169,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,  171,    0,  171,  171,    0,  171,
        0,  171,  171,  171,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  171,  171,  172,  172,    0,
        0,    0,  172,  172,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  172,  172,  173,  173,
        0,    0,    0,  173,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  176,
        0,    0,    0,  176,  176,  176,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,  178,
      178,    0,    0,    0,  178,  178,  178,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  178,  178,
      179,  179,    0,    0,    0,  179,  179,  179,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  179,
      179,  180,  180,    0,    0,    0,  180,  180,  180,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  180,
      180,  180,  186,    0,  186,    0,  186,  186,    0,    0,
        0,  186,  186,  186,  186,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  186,  186,  188,    0,  188,
        0,  188,  188,    0,    0,    0,  188,  188,    0,  188,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      188,  188,  189,    0,  189,    0,  189,  189,    0,    0,
        0,  189,  189,  189,  189,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  189,  189,  191,    0,  191,
        0,    0,  191,    0,    0,    0,  191,  191,  191,  191,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      191,  191,  193,    0,  193,    0,  193,  193,    0,    0,
        0,  193,  193,  193,  193,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  193,  193,  194,    0,  194,
        0,  194,  194,    0,    0,    0,  194,  194,  194,  194,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      194,  194,  195,    0,  195,    0,  195,  195,    0,    0,
        0,  195,  195,  195,  195,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  195,  195,  195,  196,    0,  196,
        0,  196,  196,    0,    0,    0,  196,  196,    0,  196,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      196,  196,  203,    0,  203,    0,  203,  203,    0,    0,
        0,  203,  203,  203,  203,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  203,  203,  205,  205,    0,
        0,    0,  205,  205,  205,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  205,  205,  206,  206,
        0,    0,    0,  206,  206,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  206,  206,  207,
      207,    0,    0,    0,  207,  207,  207,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  207,  207,

      209,    0,    0,    0,  209,  209,  209,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  209,  209,
      210,  210,    0,    0,    0,  210,  210,  210,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
      210,  211,  211,    0,    0,    0,  211,  211,  211,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      211,  211,  212,  212,    0,    0,    0,  212,  212,  212,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      212,  212,  212,  213,    0,  213,    0,  213,  213,    0,
        0,    0,  213,  213,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  213,  213,  217,  217,
        0,    0,    0,  217,  217,  217,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  217,  217,  218,
      218,  218,  218,    0,    0,    0,  218,  218,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      218,  218,  220,  220,  220,  220,    0,    0,    0,  220,
      220,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  220,  220,  220,  223,  223,    0,  223,    0,
        0,    0,  223,  223,  223,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  223,  223,  224,    0,

        0,    0,  224,  224,  224,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  224,  224,  226,  226,
      226,  226,    0,    0,    0,  226,  226,  226,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  226,
      226,  227,  227,  227,  227,    0,    0,    0,  227,  227,
      227,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  227,  227,  229,  229,  229,  229,    0,    0,
        0,  229,  229,  229,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  229,  229,  229,  231,  231,  231,
      231,    0,    0,    0,  231,  231,  231,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  231,  231,
      236,    0,  236,  236,    0,  236,    0,  236,  236,  236,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  236,  236,  238,    0,  238,  238,    0,  238,    0,
      238,  238,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  238,  238,  239,    0,  239,  239,
        0,  239,    0,  239,  239,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  239,  239,  241,
        0,    0,  241,    0,  241,    0,  241,  241,  241,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      241,  241,  243,    0,  243,  243,    0,  243,    0,  243,
      243,  243,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  243,  243,  244,    0,  244,  244,    0,
      244,    0,  244,  244,  244,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  244,  244,  245,    0,
      245,  245,    0,  245,    0,  245,  245,  245,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  245,  245,
      245,  247,    0,  247,    0,  247,  247,    0,  247,    0,
      247,  247,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  247,  247,  249,    0,    0,  249,

        0,  249,    0,  249,  249,  249,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  249,  253,    0,
      253,  253,    0,  253,    0,  253,  253,  253,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  253,
      253,  255,  255,    0,    0,    0,  255,  255,  255,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      255,  255,  256,  256,    0,    0,    0,  256,  256,  256,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  256,  256,  258,    0,  258,    0,  258,  258,    0,
        0,    0,  258,  258,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  258,  258,  261,    0,
      261,    0,  261,  261,    0,    0,    0,  261,  261,    0,
      261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  261,  261,  262,    0,  262,    0,  262,  262,    0,
        0,    0,  262,  262,    0,  262,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  262,  262,  262,  266,    0,
      266,    0,    0,  266,    0,    0,    0,  266,  266,  266,
      266,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  266,  266,  269,    0,  269,    0,  269,  269,    0,
        0,    0,  269,  269,  269,  269,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  269,  269,  274,    0,
      274,    0,  274,  274,    0,    0,    0,  274,  274,  274,
      274,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  274,  274,  280,  280,    0,    0,    0,  280,  280,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  280,  280,  284,    0,    0,    0,  284,  284,
      284,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  284,  284,  286,  286,    0,    0,    0,  286,
      286,  286,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  286,  286,  296,  296,  296,  296,    0,

        0,    0,  296,  296,  296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  296,  296,  300,    0,
      300,  300,  300,  300,    0,    0,    0,  300,  300,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  300,  300,  303,    0,  303,  303,    0,  303,    0,
      303,  303,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  303,  303,  308,    0,    0,  308,
        0,  308,    0,  308,  308,  308,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  308,  308,  311,
        0,  311,  311,    0,  311,    0,  311,  311,  311,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      311,  311,  327,    0,  327,    0,  327,  327,    0,    0,
        0,  327,  327,  327,  327,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  327,  327,  330,    0,  330,
        0,  330,  330,    0,    0,    0,  330,  330,    0,  330,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      330,  330,  336,  336,    0,    0,    0,  336,  336,  336,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  336,  336,  339,    0,  339,    0,  339,  339,    0,
        0,    0,  339,  339,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  339,  339,  349,    0,
      349,  349,    0,  349,    0,  349,  349,  349,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  349,
      349,  353,    0,  353,    0,  353,  353,    0,  353,    0,
      353,  353,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  353,  353,  374,    0,    0,  374,
      374,  375,  375,    0,  375,  375,  376,  376,    0,  376,
      376,  377,    0,    0,    0,  377,  378,    0,    0,  378,
      378,  379,  379,    0,  379,  379,  380,    0,    0,  380,
      380,  381,    0,    0,    0,  381,  384,  384,    0,  384,

      384,  385,  385,    0,  385,  385,  386,    0,    0,    0,
      386,  387,  387,    0,  387,  387,  388,    0,    0,  388,
      388,  389,    0,    0,  389,  389,  390,    0,    0,  390,
      390,  391,    0,    0,  391,  391,  392,    0,    0,  392,
      392,  393,  393,    0,  393,  393,  394,    0,    0,    0,
      394,  395,  395,    0,  395,  395,  396,    0,    0,    0,
      396,  397,  397,    0,  397,  397,  398,    0,    0,    0,
      398,  399,  399,    0,  399,  399,  400,  400,    0,  400,
      400,  401,  401,    0,  401,  401,  402,    0,    0,    0,
      402,  403,    0,    0,    0,  403,  404,    0,    0,    0,

      404,  405,    0,    0,  405,  405,  406,  406,    0,  406,
      406,  407,    0,    0,  407,  407,  408,  408,    0,  408,
      408,  409,    0,    0,  409,  409,  410,    0,    0,  410,
      410,  411,    0,    0,  411,  411,  412,    0,    0,  412,
      412,  413,    0,    0,    0,  413,  414,    0,    0,    0,
      414,  415,    0,    0,    0,  415,  416,  416,    0,  416,
      416,  417,  417,    0,  417,  417,  418,  418,    0,  418,
      418,  419,  419,    0,  419,  419,  420,  420,    0,  420,
      420,  421,  421,    0,  421,  421,  422,    0,    0,    0,
      422,  423,  423,    0,  423,  423,  424,    0,    0,    0,

      424,  425,    0,    0,    0,  425,  426,  426,    0,  426,
      426,  427,    0,    0,    0,  427,  428,    0,    0,  428,
      428,  429,    0,    0,  429,  429,  430,    0,    0,  430,
      430,  431,    0,    0,  431,  431,  432,  432,    0,  432,
      432,  433,    0,    0,  433,  433,  434,  434,    0,  434,
      434,  435,    0,    0,  435,  435,  436,    0,    0,  436,
      436,  437,  437,    0,  437,  437,  438,    0,    0,  438,
      438,  439,    0,    0,    0,  439,  440,    0,    0,    0,
      440,  441,  441,    0,  441,  441,  442,    0,    0,    0,
      442,  443,    0,    0,    0,  443,  444,  444,    0,  444,

      444,  445,  445,    0,  445,  445,  446,  446,    0,  446,
      446,  447,  447,    0,  447,  447,  448,  448,    0,  448,
      448,  449,  449,    0,  449,  449,  451,    0,    0,    0,
      451,  452,    0,    0,    0,  452,  453,    0,    0,    0,
      453,  454,    0,    0,    0,  454,  455,    0,    0,    0,
      455,  456,  456,    0,  456,  456,  457,    0,    0,  457,
      457,  458,    0,    0,  458,  458,  459,  459,    0,  459,
      459,  460,    0,    0,  460,  460,  461,    0,    0,  461,
      461,  462,    0,    0,  462,  462,  463,    0,    0,  463,
      463,  464,    0,    0,  464,  464,  465,    0,    0,  465,

      465,  466,    0,    0,  466,  466,  467,    0,    0,  467,
      467,  468,    0,    0,  468,  468,  469,  469,    0,  469,
      469,  470,    0,    0,  470,  470,  471,    0,    0,    0,
      471,  472,  472,    0,  472,  472,  473,  473,    0,  473,
      473,  474,  474,    0,  474,  474,  475,  475,    0,  475,
      475,  476,  476,    0,  476,  476,  477,  477,    0,  477,
      477,  478,  478,    0,  478,  478,  479,    0,    0,    0,
      479,  480,  480,    0,  480,  480,  481,  481,    0,  481,
      481,  482,    0,    0,  482,  482,  483,  483,    0,  483,
      483,  485,  485,    0,  485,  485,  486,  486,    0,  486,

      486,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[20] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 10 "shell.l"

#include <cstring>
#include "y.tab.hh"

// 导入wirte(), read()
#include <unistd.h>

// 导入fork()
#include "unistd.h"

// 导入c_str()
#include <cstring>

// 导入cpp print
#include <iostream>

// 导入waitpid()
#include <sys/wait.h>

// 导入 open()  close()
#include <fcntl.h>

// 导入 setenv(), unsetenv(), getenv(), realpath()
#include <stdlib.h>

// 导入 realpath()
#include <limits.h>

// 存储return code ${?}
extern int * return_code;

// 存储back PID ${!}
extern int * back_PID;

// 存储 pre cmd last arg ${_}
extern std::string * pre_cmd_last_arg;

// 存储 shell path ${SHELL}
extern char * shell_path;

// 导入shell exit
extern void shell_exit();

// 导入编辑器
extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

// 导入编辑器结束

static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 1525 "lex.yy.cc"
#line 1526 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 92 "shell.l"

#line 1745 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 373 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3702 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 93 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 97 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 105 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 113 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 117 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 125 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "shell.l"
{
	return PIPE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "shell.l"
{
	// 退出 (exit)

	//printf("Good bye!!\n");
	//_exit(0);
	
	shell_exit();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "shell.l"
{
	// source 函数

	// 文件input
	char * file_dir = yytext + 7;

	int file_input = open(file_dir, O_RDONLY);

	
	// !!! 长度受限
	int length = 1024;
	// 创建buffer
	char* output = new char[length];
	// 读取文件
	int ture_length = read(file_input, output, length);
	// 关闭文件接口
	close(file_input);

	//printf("%s", output);

	output[ture_length] = '\0';

	// 从后向前loop buffer
	for(int i = ture_length - 1; i >= 0; i--) {
		/*
		// 替换'\n' 为 ' '
		if(output[i] == '\n')
		{
			output[i] = ' ';
		}
		*/
		// 丢回lex
		myunputc(output[i]);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 179 "shell.l"
{
	// Subshell (`` $())

	// 得到带$()string的ptr
	std::string command = std::string(yytext);
	//std::string command = std::string(yytext);

	// 去除$
	if (command.at(0) == '$') {
    	command = command.substr(1,command.size() - 1);
  	}
	
	// 去除() (或者是'')
	command = command.substr(1, command.size() - 2);
	

	// 存档母进程stdin stdout用于恢复
	int tmpin = dup(0);
	int tmpout = dup(1);

	// 创建pipe
	int pipein[2];
	int pipeout[2];
	pipe(pipein);
	pipe(pipeout);

	// 子进程stdin重定向
	dup2(pipein[0], 0);
	close(pipein[0]);

	// 子进程stdout重定向
	dup2(pipeout[1], 1);
	close(pipeout[1]);

	// 创建子进程
	int pid = fork();

	// 运行子进程(subshell)
	if(pid == 0) {

		// 关闭pipeout[0]接口 (母读取)
		close(pipeout[0]);
		// 关闭pipein[1]接口 (母写入)
		close(pipein[1]);

		// 运行子进程
		char ** argv = new char*[1];
		argv[0] = (char*)"/proc/self/exe";
		execvp(argv[0], argv);
		perror("subshell execlp");
		_exit(1);

	} else if(pid < 0) {	
		// 子进程报错
		perror("fork");
		_exit(1);
	} else {
		// 运行母进程

		// 关闭pipein[0]接口 (子读取)
		close(pipein[0]);
		// 关闭pipeout[1]接口 (子写入)
		close(pipeout[1]);

		// 向子进程输入命令
		write(pipein[1], command.c_str(), command.size());
		// 向子进程输入命令结束
		write(pipein[1], "\nexit\n", 6);
		// 关闭pipein[1]接口 (母写入)
		close(pipein[1]);

		// 等待子进程结束
		waitpid(pid, NULL, 0);

		// 母进程stdin stdout重定向(还原)
		dup2(tmpin, 0);
		close(tmpin);
		dup2(tmpout, 1);
		close(tmpout);

		// 初始化buffer长度
		// !!! 长度受限
		int length = 1024;

		// 创建buffer
		char* output = new char[length];

		// 读取子进程输出
		int ture_length = read(pipeout[0], output, length);

    	// 关闭pipeout[0]接口 (母读取)
		close(pipeout[0]);

		// 从后向前loop buffer
		for(int i = ture_length - 1; i >= 0; i--) {
			// 替换'\n' 为 ' '
			if(output[i] == '\n')
			{
				output[i] = ' ';
			}
			// 丢回lex
			myunputc(output[i]);
		}
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 285 "shell.l"
{
	// Escaping (\)

	// 原始string
	auto word = new std::string(yytext);

	// 处理
	for (int i = 0; i < (word->length()); i++) {
		if (word->at(i) == '\\') {
			word->erase(i, 1);
		}
    }

	yylval.cpp_string = word;
	return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 302 "shell.l"
{
	// Quotes ("")

	// 原始string
	auto word = new std::string(yytext);

	// 去除""
	*word = word->substr(1, word->length() - 2);

	yylval.cpp_string = word;
	return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 315 "shell.l"
{
	// 3.2: Tilde expansion (~)

	// 原始string
	auto word = std::string(yytext);

	auto current_user = std::string(getenv("USER"));
	auto path = std::string(getenv("HOME"));
	path = path.substr(0, path.length() - current_user.length());

	if (word.length() == 1 || word.at(1) == '/') {
		// current user
		word = path + current_user + word.substr(1, word.length() - 1);
	} else {
		// other user
		word = path + word.substr(1, word.length() - 1);
	}

	yylval.cpp_string = new std::string(word);
	return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 337 "shell.l"
{
	// Environment variable (${})

	// 原始string
	auto word = std::string(yytext);

	// 处理
	for (int i = 1; i < (word.length()); i++) {
		// 发现env
		if (word.at(i) == '{' & word.at(i - 1) == '$') {
			// 找env结束
			for (int j = i + 1; j < (word.length()); j++) {
				if (word.at(j) == '}') {
					// 获得env_name
					auto env_name = word.substr(i + 1, j - i - 1);

					// 获取env
					std::string env = "";
					if (env_name == "$") {
						// ${$} shell PID
						// to_string: int 到 string
						env = std::to_string(getpid());
					} else if (env_name == "?") {
						// ${?} return code for last command
						env = std::to_string(*return_code);				
					} else if (env_name == "!") {
						// ${!} last background cmd PID
						env = std::to_string(*back_PID);
					} else if (env_name == "_") {
						// ${_} pre cmd last arg
						env = *pre_cmd_last_arg;
					} else if (env_name == "SHELL") {
						// ${SHELL} path of shell
						char absolute_path[1024];
						realpath(shell_path, absolute_path);
						env = std::string(absolute_path);
					} else {
						// 通用情况
						env = std::string(getenv(env_name.c_str()));
					}

					// 修改原word
					word.replace(word.find(word.substr(i - 1, j - i + 2)), j - i + 2, env);

					// end this env
					break;
				}
			}
		}
    }

	yylval.cpp_string = new std::string(word);
	return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 392 "shell.l"
{
	// WORD 需要放最后!

	auto word = new std::string(yytext);

	/*
	// Environment variable (${})
	if (command.at(0) == '$' ) {
    	command = command.substr(1,command.size() - 1);
  	}
	*/

	yylval.cpp_string = word;
	return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 409 "shell.l"
ECHO;
	YY_BREAK
#line 2186 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 373 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 373 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 372);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 409 "shell.l"

